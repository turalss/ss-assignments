/**
 * 
 */
package com.assignment.datetimeapi;

import java.security.Timestamp;
import java.time.DayOfWeek;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.Period;
import java.time.temporal.Temporal;
import java.time.temporal.TemporalAdjuster;
import java.time.temporal.TemporalAdjusters;
import java.util.Date;
import java.util.Random;
import java.util.concurrent.ThreadLocalRandom;

/**
 * @author tural.hasanli
 *
 */
public class DateTimeApi {

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		
		
		// store date of birth in years, months, days, seconds, and nanoseconds. 
		LocalDateTime birthDay = LocalDateTime.of(1990, 11, 23, 9, 50, 20, 59);
		System.out.println(birthDay); 
		
		
		// ------------------------------------------------// 
		
		// Given a random date, find the date of the previous Tuesday 
		
		
		LocalDate date = randomDateGenerator();
		System.out.println("random date: " + date);
		System.out.println("last Tuesday: " + previousTuesday(date));
		
		
	}
	// generate random date
	// obtains the current date from system and generates random number
	// returns a new date by subtracting number of days generated by Random() 
	public static LocalDate randomDateGenerator() {
		return LocalDate.now().minus(Period.ofDays((new Random().nextInt(365 * 1000))));
		
	}
	
	// find previous Tuesday of the given date 
	// takes a date adjusts the date to the first occurrence of the specified day-of-week of the previous week. 
	public static LocalDate previousTuesday(LocalDate date) {
		LocalDate newDate = date.with(TemporalAdjusters.previous(DayOfWeek.TUESDAY));
		return newDate;
	}
	
	
	


	
	

	
}
