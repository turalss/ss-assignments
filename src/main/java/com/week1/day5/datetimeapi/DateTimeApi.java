package com.week1.day5.datetimeapi;

import java.security.Timestamp;
import java.time.DayOfWeek;
import java.time.Instant;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.Month;
import java.time.Period;
import java.time.YearMonth;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.ZonedDateTime;
import java.time.temporal.Temporal;
import java.time.temporal.TemporalAdjuster;
import java.time.temporal.TemporalAdjusters;
import java.time.zone.ZoneOffsetTransitionRule;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.List;
import java.util.Random;
import java.util.concurrent.ThreadLocalRandom;
import java.util.function.Function;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

/**
 * @author tural.hasanli
 *
 */
public class DateTimeApi {

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		// Q1
		// store date of birth in years, months, days, seconds, and nanoseconds.
		LocalDateTime birthDay = LocalDateTime.of(1990, 11, 23, 9, 50, 20, 59);
//		System.out.println(birthDay);

		// ------------------------------------------------//
		// Q2
		// Given a random date, find the date of the previous Tuesday

		LocalDate date = randomDateGenerator();
//		System.out.println("random date: " + date);
//		System.out.println("last Tuesday: " + previousTuesday(date));

		// Q3
		// What is the difference between ZoneId and ZoneOffset
		Instant dateTime = Instant.now(); // get current DateTime
		// get system's ZoneId - returns as Zone - location/ UTC/Greenwich
		ZoneId zoneId = ZoneId.systemDefault();
		ZoneOffset currenOffset = zoneId.getRules().getOffset(dateTime); // current offset of my zone
//        System.out.println(currenOffset);

		// Q4
		// how to convert an Instant to a ZonedDateTime?
		ZonedDateTime zonedDateTime = dateTime.atZone(zoneId);
//        System.out.println(zonedDateTime);
		// hot to convert ZoneDateTime to an instant?
		Instant getInstant = zonedDateTime.toInstant();
//        System.out.println(getInstant); 

		// Q5
		// Write an example that, for a given year, reports the length of each month
		// within that year
		numOfDayForEachMonth(2020).stream().forEach(days -> System.out.println(days));

		// Q6
		// Write an example that, for given month of the current year, list all of the
		// Mondays in that month
		mondaysOfMonth(1990, 11).forEach(days -> System.out.println(days));

		// Q7
		// Write an example that tests weather a given date occurs on Friday the 13th;
		System.out.println(isFriday13().apply(date));
		
	}

	static Function<LocalDate, Boolean> isFriday13() {
		return date -> date.getDayOfWeek() == DayOfWeek.FRIDAY && date.getDayOfMonth() == 13 ? true : false;
	}

	// check length of months for a given year
	static List<Integer> numOfDayForEachMonth(int year) {
		return IntStream.rangeClosed(1, 12).mapToObj(month -> YearMonth.of(year, month).lengthOfMonth())
				.collect(Collectors.toList());
	}
	
	static List<LocalDate> mondaysOfMonth(int year, int month) {
		return IntStream.rangeClosed(1, YearMonth.of(year, month).lengthOfMonth())
				.mapToObj(day -> LocalDate.of(year, month, day)).filter(d -> d.getDayOfWeek() == DayOfWeek.MONDAY)
				.collect(Collectors.toList());
	}
	// generate random date
	// obtains the current date from system and generates random number
	// returns a new date by subtracting number of days generated by Random()
	static LocalDate randomDateGenerator() {
		return LocalDate.now().minus(Period.ofDays((new Random().nextInt(365 * 1000))));
	}

	// find previous Tuesday of the given date
	// takes a date adjusts the date to the first occurrence of the specified
	// day-of-week of the previous week.
	static LocalDate previousTuesday(LocalDate date) {
		return date.with(TemporalAdjusters.previous(DayOfWeek.TUESDAY));
	}

}
